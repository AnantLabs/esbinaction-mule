<?xml version="1.0"?>
<!--
This build file is a generic build file that can be used to stop and start
the various services and tools that are used in the examples.
-->
<project name="ESB - generic" basedir=".." xmlns:c="urn:contrib-ant">
  
	<!-- General locations -->
	<property name="book.home" location="../../../../.." />
	<property name="tools.home" value="${book.home}/tools" />
	<property name="workspace.home" location="../../../" />
	<property name="test.home" value="${book.home}/osesb-test-client" />

	<!--
	  Starts mailserver with the following settings:
	  	- Pop server running on: 110
	  	- SMTP server running on: 25
	-->

	<target name="ext:start-james-windows" description="start the james mail server with default settings">
		<property name="james.home" value="${tools.home}/james-2.3.1"/>
		<java jar="${james.home}/bin/phoenix-loader.jar" fork="true">
			<jvmarg value="-Djava.io.tmpdir=${james.home}/temp"/>
			<jvmarg value="-Djava.ext.dirs=${james.home}/lib;${james.home}/tools/lib"/>
			<jvmarg value="-Dphoenix.home=${james.home}"/>
			<jvmarg value="-Dnetworkaddress.cache.ttl=300"/>		
		</java>
	</target>
	
	<target name="ext:start-james-linux" description="start the james mail server with default settings">
		<echo message="You should run this taks as root, since we start on port 25 and 110"/>
		<property name="james.home" value="${tools.home}/james-2.3.1"/>
		<java jar="${james.home}/bin/phoenix-loader.jar" fork="true">
			<jvmarg value="-Djava.io.tmpdir=${james.home}/temp"/>
			<jvmarg value="-Djava.ext.dirs=${james.home}/lib:${james.home}/tools/lib"/>
			<jvmarg value="-Dphoenix.home=${james.home}"/>
			<jvmarg value="-Dnetworkaddress.cache.ttl=300"/>			
		</java>
	</target>	
	
	<target name="ext:start-openejb" description="start the open-ejb ejb container">
		<property name="openejb.home" value="${tools.home}/openejb-3.0/"/>
		<java fork="true" jar="${openejb.home}/lib/openejb-core-3.0.jar">
			<jvmarg value="-javaagent:${openejb.home}/lib/openejb-javaagent-3.0.jar"/>
			<arg value="start"/>
		</java>
	</target>
	
	<!-- internal target that can be used to deploy an ejb to openejb -->
	<target name="ext:openejb-deploy">
	
	 	<delete file="${openejb.home}/apps/${ejb-dest-file}"/>
		<mkdir dir="${work}"/>
		<jar destfile="${work}/${ejb-dest-file}">
			<fileset dir="${classes-dir}">
				<include name="${include-classes}"/>
			</fileset>
		</jar>
		
		<property name="openejb.home" value="${tools.home}/openejb-3.0/"/>
		<java fork="true" jar="${openejb.home}/lib/openejb-core-3.0.jar">
			<jvmarg value="-javaagent:${openejb.home}/lib/openejb-javaagent-3.0.jar"/>
			<arg value="deploy"/>
			<arg value="${work}/${ejb-dest-file}"/>					
		</java>		
	</target>
	
	<!-- internal target that can be used to deploy an ejb to openejb -->
	<target name="ext:openejb-undeploy">		
		<property name="openejb.home" value="${tools.home}/openejb-3.0/"/>
		<!-- <delete file="${openejb.home}/apps/${ejbID}"/> -->
		<java fork="true" jar="${openejb.home}/lib/openejb-core-3.0.jar" failOnError="false">
			<jvmarg value="-javaagent:${openejb.home}/lib/openejb-javaagent-3.0.jar"/>
			<arg value="undeploy"/>
			<arg value="${openejb.home}/apps/${ejbID}"/>					
		</java>
		
		<delete file="${openejb.home}/apps/${ejbID}"/>

	</target>	
  
  <target name="ext:start-AnomicFTPD" description="start the ftp server">
    <property name="ftp.home" value="${tools.home}/AnomicFTPD_v0.93_build20080215"/>
      
    <java fork="true" classname="ftpd" dir="${ftp.home}">
      <jvmarg value="-Duser.home=${ftp.home}"/>
      <classpath>
                <pathelement path="${ftp.home}/Classes"/>
      </classpath>
    </java>
  </target>
	
	<target name="ext:start-activeMQ" description="start activeMQ JMS broker">
		<property name="jms.home" value="${tools.home}/apache-activemq-4.1.2"/>
		
		<java fork="true" jar="${jms.home}/bin/run.jar">
			<jvmarg value="-Djavax.net.ssl.keyStorePassword=password"/>
			<jvmarg value="-Djavax.net.ssl.trustStorePassword=password"/>
			<jvmarg value="-Djavax.net.ssl.keyStore=${jms.home}/conf/broker.ks"/>
			<jvmarg value="-Djavax.net.ssl.trustStore=${jms.home}/conf/broker.ts"/>
			<jvmarg value="-Dactivemq.home=${jms.home}"/>
		</java>
	</target>
	
	<target name="ext:start-hsqldb" description="start the database">
		<property name="hsqldb.home" value="${tools.home}/hsqldb"/>
		<java fork="true" classname="org.hsqldb.Server">
			<arg line="-database.0 file:mydb -dbname.0 xdb -database.1 file:mydb2 -dbname.1 reservation"/>
			<classpath>
				<fileset dir="${hsqldb.home}">
					<include name="lib/*.jar"/>
				</fileset>
			</classpath>
		</java>
	</target>
	
	<target name="ext:jdbc-setup-database">
		<property name="hsqldb.home" value="${tools.home}/hsqldb"/>
		<java fork="true" classname="org.hsqldb.util.SqlTool">
		 <arg line="--rcFile ${rc-file} ${urlID} ${sql-file}"/> 
			<classpath>
				<fileset dir="${hsqldb.home}">
					<include name="lib/*.jar"/>
				</fileset>
			</classpath>
		</java>
	</target>
	
	<target name="ext:start-wildfire" description="start wildfire, the XMPP server">
		<property name="wildfire.home" value="${tools.home}/openfire"/>
		<!-- start from the lib dir, this allows us to start without having to 
		     configure all the libraries -->
		<java fork="true" jar="${wildfire.home}/lib/startup.jar" dir="${wildfire.home}/lib">
		</java>
	</target>
	
	<target name="ext:start-exist" description="start the eXist xml database">
		<property name="exist.home" value="${tools.home}/eXist"/>
		<java fork="true" jar="${tools.home}/eXist/start.jar" dir="${exist.home}">
			<arg line="standalone"/>
		</java>
		
	</target>
	
	<target name="ext:test-client" description="start the Swing test client">
		<java fork="true" jar="${test.home}/osesb-test-client.jar" dir="${test.home}" />
	</target>

</project>
